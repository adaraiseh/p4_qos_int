diff --git a/targets/simple_switch/main.cpp b/targets/simple_switch/main.cpp
index 53a8bfd..0bfc0d7 100644
--- a/targets/simple_switch/main.cpp
+++ b/targets/simple_switch/main.cpp
@@ -49,6 +49,9 @@ main(int argc, char* argv[]) {
   simple_switch_parser.add_uint_option(
       "priority-queues",
       "Number of priority queues (default is 1)");
+  simple_switch_parser.add_uint_option(
+      "max-link-bw",
+      "The max link bandwidth used in mininet (default is 10)");
 
   bm::OptionsParser parser;
   parser.parse(argc, argv, &simple_switch_parser);
@@ -78,8 +81,17 @@ main(int argc, char* argv[]) {
       std::exit(1);
   }
 
+  uint32_t max_link_bw = 0xffffffff;
+  {
+    auto rc = simple_switch_parser.get_uint_option("max-link-bw", &max_link_bw);
+    if (rc == bm::TargetParserBasic::ReturnCode::OPTION_NOT_PROVIDED)
+      max_link_bw = SimpleSwitch::default_max_link_bw;
+    else if (rc != bm::TargetParserBasic::ReturnCode::SUCCESS)
+      std::exit(1);
+  }
+
   simple_switch = new SimpleSwitch(enable_swap_flag, drop_port,
-                                   priority_queues);
+                                   priority_queues, max_link_bw);
 
   int status = simple_switch->init_from_options_parser(parser);
   if (status != 0) std::exit(status);
diff --git a/targets/simple_switch/simple_switch.cpp b/targets/simple_switch/simple_switch.cpp
index dcb597f..952051b 100644
--- a/targets/simple_switch/simple_switch.cpp
+++ b/targets/simple_switch/simple_switch.cpp
@@ -199,12 +199,14 @@ class SimpleSwitch::InputBuffer {
 };
 
 SimpleSwitch::SimpleSwitch(bool enable_swap, port_t drop_port,
-                           size_t nb_queues_per_port)
+                           size_t nb_queues_per_port, size_t max_link_bw)
   : Switch(enable_swap),
     drop_port(drop_port),
     input_buffer(new InputBuffer(
         1024 /* normal capacity */, 1024 /* resubmit/recirc capacity */)),
     nb_queues_per_port(nb_queues_per_port),
+    max_link_bw(max_link_bw),
+    queue_drop_counters(nb_queues_per_port),
     egress_buffers(nb_egress_threads,
                    64, EgressThreadMapper(nb_egress_threads),
                    nb_queues_per_port),
@@ -218,7 +220,12 @@ SimpleSwitch::SimpleSwitch(bool enable_swap, port_t drop_port,
     }),
     pre(new McSimplePreLAG()),
     start(clock::now()),
-    mirroring_sessions(new MirroringSessions()) {
+    mirroring_sessions(new MirroringSessions()),
+    dev_mgr(this) {
+  // Initialize all drop counters to 0:
+  for (auto &counter : queue_drop_counters) {
+    counter.store(0);
+  }
   add_component<McSimplePreLAG>(pre);
 
   add_required_field("standard_metadata", "ingress_port");
@@ -397,7 +404,8 @@ SimpleSwitch::transmit_thread() {
 
 ts_res
 SimpleSwitch::get_ts() const {
-  return duration_cast<ts_res>(clock::now() - start);
+    auto now = std::chrono::system_clock::now();
+    return std::chrono::duration_cast<ts_res>(now.time_since_epoch());
 }
 
 void
@@ -414,13 +422,18 @@ SimpleSwitch::enqueue(port_t egress_port, std::unique_ptr<Packet> &&packet) {
 
     size_t priority = phv->has_field(SSWITCH_PRIORITY_QUEUEING_SRC) ?
         phv->get_field(SSWITCH_PRIORITY_QUEUEING_SRC).get<size_t>() : 0u;
+    BMLOG_DEBUG("original on packet INT {}", priority);
     if (priority >= nb_queues_per_port) {
       bm::Logger::get()->error("Priority out of range, dropping packet");
       return;
     }
-    egress_buffers.push_front(
+    int ret;
+    ret = egress_buffers.push_front(
         egress_port, nb_queues_per_port - 1 - priority,
         std::move(packet));
+    if (ret == 0) {
+      queue_drop_counters[nb_queues_per_port - 1 - priority]++;
+    }
 }
 
 // used for ingress cloning, resubmit
@@ -644,17 +657,34 @@ void
 SimpleSwitch::egress_thread(size_t worker_id) {
   PHV *phv;
 
+  struct PortState {
+      uint64_t last_transmitted_bytes = 0;
+      uint64_t last_update_time_us = 0;
+      float historical_utilization = 0.0f;
+  };
+
+  std::unordered_map<port_t, PortState> port_states;
+
+  constexpr float alpha = 0.3; // Smoothing factor
+  constexpr int UTILIZATION_SCALE = 1e6;
+  const uint64_t max_bandwidth_bps = max_link_bw * 1e6; // Mbps
+
+  // Define a minimum time interval in microseconds (e.g., 100 ms)
+  const uint64_t MIN_TIME_INTERVAL_US = 100000; // 100 milliseconds
+
   while (1) {
     std::unique_ptr<Packet> packet;
     size_t port;
+    size_t queue_id;
     size_t priority;
-    egress_buffers.pop_back(worker_id, &port, &priority, &packet);
+    egress_buffers.pop_back(worker_id, &port, &queue_id, &packet);
     if (packet == nullptr) break;
-
+    priority = nb_queues_per_port - 1 - queue_id;
     Deparser *deparser = this->get_deparser("deparser");
     Pipeline *egress_mau = this->get_pipeline("egress");
 
     phv = packet->get_phv();
+    uint32_t drop_count_for_this_queue = queue_drop_counters[queue_id].load();
 
     if (phv->has_field("intrinsic_metadata.egress_global_timestamp")) {
       phv->get_field("intrinsic_metadata.egress_global_timestamp")
@@ -668,14 +698,74 @@ SimpleSwitch::egress_thread(size_t worker_id) {
           get_ts().count() - enq_timestamp);
       phv->get_field("queueing_metadata.deq_qdepth").set(
           egress_buffers.size(port));
+      phv->get_field("queueing_metadata.queue_drop").set(
+        drop_count_for_this_queue);
       if (phv->has_field("queueing_metadata.qid")) {
         auto &qid_f = phv->get_field("queueing_metadata.qid");
-        qid_f.set(nb_queues_per_port - 1 - priority);
+        qid_f.set(queue_id);
+        BMLOG_DEBUG("set QID on packet INT {}", queue_id);
+        BMLOG_DEBUG("set priority on packet INT {}", priority);
       }
     }
 
     phv->get_field("standard_metadata.egress_port").set(port);
 
+    uint64_t current_time_us = get_time_elapsed_us();
+
+    // Access or initialize port state
+    if (port_states.find(port) == port_states.end()) {
+        port_states[port] = PortState(); // Initialize port state
+    }
+    PortState &state = port_states[port];
+
+    // Calculate time since last update
+    uint64_t time_since_last_update_us = current_time_us - state.last_update_time_us;
+
+    if (time_since_last_update_us >= MIN_TIME_INTERVAL_US) {
+        // Use the dev_mgr pointer to get port stats
+        auto port_stats = dev_mgr->get_port_stats(port);
+        uint64_t transmitted_bytes = port_stats.out_octets;
+
+        uint64_t bytes_diff = transmitted_bytes - state.last_transmitted_bytes;
+
+        // Handle counter rollover or reset
+        if (transmitted_bytes < state.last_transmitted_bytes) {
+            BMLOG_DEBUG("Bytes counter rollover detected on port {}", port);
+            uint64_t max_counter_value = UINT64_MAX; // Assuming 64-bit counter
+            transmitted_bytes += max_counter_value - state.last_transmitted_bytes;
+            bytes_diff = transmitted_bytes;
+        }
+
+        // Logging for debugging
+        BMLOG_DEBUG("Port {}: transmitted_bytes={}, last_bytes={}, bytes_diff={}",
+            port, transmitted_bytes, state.last_transmitted_bytes, bytes_diff);
+        BMLOG_DEBUG("Port {}: current_time_us={}, last_time_us={}, time_diff_us={}",
+            port, current_time_us, state.last_update_time_us, time_since_last_update_us);
+
+        // Calculate raw utilization
+        float tx_utilization = (8.0f * bytes_diff * 1e6f) /
+                                (static_cast<float>(time_since_last_update_us) * max_bandwidth_bps);
+        tx_utilization = std::min(1.0f, tx_utilization);
+
+        // Apply exponential moving average for smoothing
+        state.historical_utilization = alpha * tx_utilization +
+                                        (1.0f - alpha) * state.historical_utilization;
+
+        // Log the calculated utilization
+        BMLOG_DEBUG("Port {}: TX utilization={} (smoothed: {}, scaled: {})",
+            port, tx_utilization, state.historical_utilization,
+            static_cast<int>(state.historical_utilization * UTILIZATION_SCALE));
+
+        // Update port state
+        state.last_transmitted_bytes = transmitted_bytes;
+        state.last_update_time_us = current_time_us;
+    }
+
+    // Attach smoothed TX utilization to metadata
+    phv->get_field("queueing_metadata.tx_utilization").set(
+        static_cast<int>(port_states[port].historical_utilization * UTILIZATION_SCALE)
+    );
+
     Field &f_egress_spec = phv->get_field("standard_metadata.egress_spec");
     // When egress_spec == drop_port the packet will be dropped, thus
     // here we initialize egress_spec to a value different from drop_port.
diff --git a/targets/simple_switch/simple_switch.h b/targets/simple_switch/simple_switch.h
index cdc751b..9b67162 100644
--- a/targets/simple_switch/simple_switch.h
+++ b/targets/simple_switch/simple_switch.h
@@ -75,6 +75,7 @@ class SimpleSwitch : public Switch {
 
   static constexpr port_t default_drop_port = 511;
   static constexpr size_t default_nb_queues_per_port = 1;
+  static constexpr size_t default_max_link_bw = 10;
 
  private:
   using clock = std::chrono::high_resolution_clock;
@@ -83,7 +84,8 @@ class SimpleSwitch : public Switch {
   // by default, swapping is off
   explicit SimpleSwitch(bool enable_swap = false,
                         port_t drop_port = default_drop_port,
-                        size_t nb_queues_per_port = default_nb_queues_per_port);
+                        size_t nb_queues_per_port = default_nb_queues_per_port,
+                        size_t max_link_bw = default_max_link_bw);
 
   ~SimpleSwitch();
 
@@ -190,6 +192,8 @@ class SimpleSwitch : public Switch {
   // for these queues, the write operation is non-blocking and we drop the
   // packet if the queue is full
   size_t nb_queues_per_port;
+  size_t max_link_bw;
+  std::vector<std::atomic<uint64_t>> queue_drop_counters;
   bm::QueueingLogicPriRL<std::unique_ptr<Packet>, EgressThreadMapper>
   egress_buffers;
   Queue<std::unique_ptr<Packet> > output_buffer;
@@ -198,6 +202,7 @@ class SimpleSwitch : public Switch {
   clock::time_point start;
   bool with_queueing_metadata{false};
   std::unique_ptr<MirroringSessions> mirroring_sessions;
+  bm::DevMgr* dev_mgr; // Pointer to the DevMgr instance
 };
 
 #endif  // SIMPLE_SWITCH_SIMPLE_SWITCH_H_
diff --git a/targets/simple_switch_grpc/main.cpp b/targets/simple_switch_grpc/main.cpp
index 9e87fdf..2f4c7c3 100644
--- a/targets/simple_switch_grpc/main.cpp
+++ b/targets/simple_switch_grpc/main.cpp
@@ -81,6 +81,9 @@ main(int argc, char* argv[]) {
   simple_switch_parser.add_uint_option(
     "priority-queues",
     "Number of priority queues (default is 1)");
+  simple_switch_parser.add_uint_option(
+    "max-link-bw",
+    "Max link bandwidth used in mininet (default is 10)");
 
   bm::OptionsParser parser;
   parser.parse(argc, argv, &simple_switch_parser);
@@ -227,6 +230,15 @@ main(int argc, char* argv[]) {
       std::exit(1);
   }
 
+  uint32_t max_link_bw = 0xffffffff;
+  {
+    auto rc = simple_switch_parser.get_uint_option("max-link-bw", &max_link_bw);
+    if (rc == bm::TargetParserBasic::ReturnCode::OPTION_NOT_PROVIDED)
+      max_link_bw = sswitch_grpc::SimpleSwitchGrpcRunner::default_max_link_bw;
+    else if (rc != bm::TargetParserBasic::ReturnCode::SUCCESS)
+      std::exit(1);
+  }
+
   auto &runner = sswitch_grpc::SimpleSwitchGrpcRunner::get_instance(
       !disable_swap_flag,
       grpc_server_addr,
diff --git a/targets/simple_switch_grpc/switch_runner.cpp b/targets/simple_switch_grpc/switch_runner.cpp
index 6824d68..b9496e3 100644
--- a/targets/simple_switch_grpc/switch_runner.cpp
+++ b/targets/simple_switch_grpc/switch_runner.cpp
@@ -501,9 +501,10 @@ SimpleSwitchGrpcRunner::SimpleSwitchGrpcRunner(
     std::string dp_grpc_server_addr,
     bm::DevMgrIface::port_t drop_port,
     std::shared_ptr<SSLOptions> ssl_options,
+    size_t max_link_bw,
     size_t nb_queues_per_port)
     : simple_switch(new SimpleSwitch(enable_swap, drop_port,
-                                     nb_queues_per_port)),
+                                     nb_queues_per_port, max_link_bw)),
       grpc_server_addr(grpc_server_addr), cpu_port(cpu_port),
       dp_grpc_server_addr(dp_grpc_server_addr),
       dp_service(nullptr),
diff --git a/targets/simple_switch_grpc/switch_runner.h b/targets/simple_switch_grpc/switch_runner.h
index ca52df4..acf0cb5 100644
--- a/targets/simple_switch_grpc/switch_runner.h
+++ b/targets/simple_switch_grpc/switch_runner.h
@@ -53,6 +53,7 @@ class SimpleSwitchGrpcRunner {
  public:
   static constexpr bm::DevMgrIface::port_t default_drop_port = 511;
   static constexpr size_t default_nb_queues_per_port = 1;
+  static constexpr size_t default_max_link_bw = 10;
 
   // there is no real need for a singleton here, except for the fact that we use
   // PIGrpcServerRunAddr, ... which uses static state
@@ -63,6 +64,7 @@ class SimpleSwitchGrpcRunner {
       std::string dp_grpc_server_addr = "",
       bm::DevMgrIface::port_t drop_port = default_drop_port,
       std::shared_ptr<SSLOptions> ssl_options = nullptr,
+      size_t max_link_bw = default_max_link_bw,
       size_t nb_queues_per_port = default_nb_queues_per_port) {
     static SimpleSwitchGrpcRunner instance(
         enable_swap, grpc_server_addr, cpu_port, dp_grpc_server_addr,
@@ -87,7 +89,8 @@ class SimpleSwitchGrpcRunner {
                          bm::DevMgrIface::port_t drop_port = default_drop_port,
                          std::shared_ptr<SSLOptions> ssl_options = nullptr,
                          size_t nb_queues_per_port =
-                             default_nb_queues_per_port);
+                             default_nb_queues_per_port,
+                         size_t max_link_bw = default_max_link_bw);
   ~SimpleSwitchGrpcRunner();
 
   void port_status_cb(bm::DevMgrIface::port_t port,
